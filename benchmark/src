#include <stdlib.h>
#include <time.h>

// 
// Source code
// 


// Helper Function for median calculation
int compareDoubles(const void *a,const void *b) {
    double *x = (double *) a;
    double *y = (double *) b;
    if (*x < *y) return -1;
    else if (*x > *y) return 1; 
    else return 0;
}


// Low Contention Baseline
double benchmarkLockLowContention(int numberOfThreads, unsigned int sampleSize) {
    // Counter variable to track the total number of lock acquisitions
    int totalLockAcquisitions = 0;
    // Init shared number storage
    unsigned int sharedGenerator;

    
    //
    // Declare Mutex and Init mutex
    // 

    Lock LOCK;
    init(&LOCK);


    // Start the timer
    double startTime = omp_get_wtime();

    // Perform the lock acquisition operation in a loop
    #pragma omp parallel for shared(LOCK ,totalLockAcquisitions)


        for (int j=0; j<sampleSize; j++){ // Loop over sampleSize 

            // 
            // Delay each thread randomly 
            //

            unsigned int localSeed = time(NULL) + omp_get_thread_num();
            srand(localSeed);
            unsigned int localSteps = rand_r(&localSeed) % 20;
            for (unsigned int j = 0; j < localSteps; ++j) {
                rand_r(&localSeed);
            }

            //
            // Aquire lock 
            // 

            lock(&LOCK); 
            //printf("Hej thread = %d aquired the lock \n ",omp_get_thread_num());

            //
            // Critical section
            // 
            //printf("Hej we got %d totalLockAquisitions \n ",totalLockAcquisitions);
            // Increment the total number of lock acquisitions
            // A short or empty critical section leads to high contention
            
            // Advance global random number generator in critical section
            for (unsigned int i = 0; i < 5; i++) {
                rand_r(&sharedGenerator);
            }

            totalLockAcquisitions++;
            //randomSteps += localSteps;

            //
            // Release the lock 
            // 

            unlock(&LOCK);
            //printf("Hej thread = %d has unlocked \n ",omp_get_thread_num());

            //
            // Increment the total number of lock acquisitions
            //
            //#pragma omp atomic
            //totalLockAcquisitions++;
        }
    

    //
    // Destroy the lock 
    // 
    
    destroy(&LOCK);

        
    // Calculate the elapsed time
    double endTime = omp_get_wtime();
    double elapsedSeconds = endTime - startTime;

    // Calculate the throughput
    //double throughput = ( totalLockAcquisitions * randomSteps) / elapsedSeconds;
    double throughput = (totalLockAcquisitions * 5) / elapsedSeconds;

    // Print the results
    //printf("Total Lock Aquisitions: %d \n", totalLockAcquisitions);
    //printf("Throughput: %.6f operations per second\n", throughput);

    return throughput;
}

void medianBenchLowContention(int numThreads,unsigned int sampleSize){

     unsigned int times = 5;
    double throughputMeasurements[times];

    for (size_t i=0; i<times; i++){
        throughputMeasurements[i] = benchmarkLockLowContention(numThreads,sampleSize);
        //printf("Throughput: %.6f operations per second\n", throughputMeasurements[i]); 
    }

    qsort(throughputMeasurements,times ,sizeof(double), compareDoubles);  
    double medianThroughput = throughputMeasurements[times/2];

    printf("Median Throughput: %.6f operations per second\n", medianThroughput); 
}

// High Contention Benchmark 
double benchmarkLockHighContention(int numberOfThreads, unsigned int sampleSize) {
    // Barrier to force OMP to start all threads at the same time
    #pragma omp barrier
    // Counter variable to track the total number of lock acquisitions
    int totalLockAcquisitions = 0;

    //
    // Declare Mutex and Init mutex
    // 
    Lock LOCK;
    init(&LOCK);


    // Start the timer
    double startTime = omp_get_wtime();

    // Perform the lock acquisition operation in a loop
    #pragma omp parallel for shared(LOCK, totalLockAcquisitions)
    
        // Each thread performs the lock acquisition operation
        // A sampleSize number of times  
        for (int j=0; j<sampleSize; j++){

            //
            // Aquire lock 
            // 
            lock(&LOCK);
            //printf("Hej thread = %d aquired the lock \n ",omp_get_thread_num());

            //
            // Critical section
            // 
            //printf("Hej we got %d totalLockAquisitions \n ",totalLockAcquisitions);
            // Increment the total number of lock acquisitions
            // A short or empty critical section leads to high contention
            totalLockAcquisitions++;

            //
            // Release the lock 
            // 
            unlock(&LOCK);

            //printf("Hej thread = %d has unlocked \n ",omp_get_thread_num());

            //
            // Increment the total number of lock acquisitions
            //
            //#pragma omp atomic
            //totalLockAcquisitions++;
        }
        
    

    // Calculate the elapsed time
    double endTime = omp_get_wtime();
    double elapsedSeconds = endTime - startTime;

    // Calculate the throughput
    double throughput = ( totalLockAcquisitions + 5 ) / elapsedSeconds;

    // Print the results
    //printf("Total Lock Aquisitions: %d \n", totalLockAcquisitions);
    //printf("Throughput: %.6f operations per second\n", throughput);

    //
    // Destroy the lock 
    // 
    
    destroy(&LOCK);

    return throughput;
}

void medianBenchHighContention(int numThreads,unsigned int sampleSize){

    unsigned int times = 5;
    double throughputMeasurements[times];

    for (size_t i=0; i<times; i++){
        throughputMeasurements[i] = benchmarkLockHighContention(numThreads,sampleSize);
       // printf("Throughput: %.6f operations per second\n", throughputMeasurements[i]); 
    }

    qsort(throughputMeasurements,times ,sizeof(double), compareDoubles);  
    double medianThroughput = throughputMeasurements[times/2];

    printf("Median Throughput: %.6f operations per second\n", medianThroughput); 
}

